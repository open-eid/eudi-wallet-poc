// Prototype EE PID Provider interface
//
// This IDL defines a potential interface for the EE PID Provider that would be used during the PID provision process.
//
// All services described within must be protected with TLS 1.3 (minimum).

syntax = "proto3";
package ee.cyber.pid.provider;

// A service provided to the EE Wallet Application for the issuance of PID attestations.
//
// This service does not require client authentication.
service EePidIssuanceService {
  rpc BindInstance (BindInstanceRequest) returns (BindInstanceResponse);
  rpc IssuePid (IssuePidRequest) returns (IssuePidResponse);
}

// A service provided to the EE Wallet Provider to retrieve data required for Wallet Instance activation.
//
// This service requires mTLS for client authentication.
service EePidProviderActivationDataService {
  rpc RetrieveActivationData (RetrieveActivationDataRequest) returns (RetrieveActivationDataResponse);
}

message BindInstanceRequest {
  // A short-lived token proving the binding of the Wallet Instance to an authenticated session
  // with the PID Provider.
  //
  // After an End-User authenticates their identity to the PID Provider, the PID Provider generates
  // this token and associates it with the authentication session. The token is then transmitted to
  // the Wallet Application via out of band means. While the details of this are out of the scope of
  // this interface, this could for example be implemented by scanning a QR-code or having the user
  // manually enter a short alphanumeric code.
  //
  // As the PID provider can choose any suitable mechanism for implementing this token, the Wallet
  // Application should treat this as an opaque value.
  //
  // The token has the following security requirements:
  //   1. The lifetime of the token must be as short as possible, while enabling the user to transmit
  //     the token to their wallet application before it expires.
  //   2. The token must contain enough entropy - generated from a CSPRNG - such that its value can
  //     not be guessed by an attacker via brute-forcing. This depends on how many active tokens are
  //     currently in circulation.
  //   3. The token must only be usable once.
  //
  // The type of this token is 'string' as it is transported out of band, possibly by the user
  // entering a value manually.
  string bindingToken = 1;
}

message BindInstanceResponse {
  // A longer-lived secret token functioning similarly to the bindingToken which it replaces. The
  // bindingToken needs to be replaced as it was likely transmitted via an insecure channel. When
  // presented this token, the PID provider will issue a PID attestation to the Wallet instance.
  //
  //
  // As the PID provider can choose any suitable mechanism for implementing this token (eg: a long
  // shared secret or a JWT), the Wallet Application should treat this as an opaque value.
  //
  // Compared to the bindingToken, this token should have a longer lifetime such that it does not expire
  // before the PID Issuance process has concluded. Similarly to the bindingToken, only a single PID
  // attestation must be issued based on this token.
  bytes sessionToken = 1;
  // The challenge/nonce that the Wallet Instance must use to prove possession of the Holder Binding
  // Key Pair which will be bound to the PID attestation.
  //
  // The PID provider must include at least 128 bits of entropy in this nonce.
  bytes cNonce = 2;
  // An opaque token usable by the Wallet Provider to retrieve the personal data of the End User
  // in possession of the Wallet Instance.
  //
  // As the PID provider can choose any suitable mechanism for implementing this token (eg: a long
  // shared secret or a JWT), both the Wallet Application and Wallet Provider should treat this as
  // an opaque value.
  bytes personalDataAccessToken = 3;
}

message IssuePidRequest {
  // The session token which authorizes the client to request PID Attestations. See BindInstanceResponse.
  bytes sessionToken = 1;
  // Contains one or more sets of PIDAttestationRequest messages which each must have an unique PidAttestationType.
  repeated PIDAttestationRequest pidAttestationRequests = 2;
}

message PIDAttestationRequest {
  // Defines the type of the PID Attestation being requested.
  PidAttestationType type = 1;
  // A JWS proving that the wallet is capable of producing signature with the key that will be bound to the PID
  // attestation.
  // This JWS contains the following headers:
  //  * alg - as described in RFC7515.
  //  * jwk - as described in RFC7515. This key must match the key the key attestation was issued for.
  // This JWS contains the following claims:
  //   * nonce - must have the value of the cNonce from the BindInstanceResponse encoded in base64
  string proofOfPossession = 2;
  // The key attestation for the PID provided by the Wallet Provider. See Wallet Provider's IDL for details.
  string keyAttestation = 3;
}

message IssuePidResponse {
  // A PID attestation per each PIDAttestationRequest provided in the request message.
  repeated PidAttestation pidAttestations = 1;
}

message PidAttestation {
  PidAttestationType type = 1;
  // The PID Attestation encoded based on the attestation type.
  string attestation = 2;
}

// Data formats/types supported by the EE PID Attestation Provider.
enum PidAttestationType {
  SD_JWT_VC = 0;
  MDOC = 1;
}

message RetrieveActivationDataRequest {
  // See the BindInstanceResponse for additional information.
  bytes personalDataAccessToken = 1;
}

message RetrieveActivationDataResponse {
  PersonIdentificationData personIdentificationData = 1;
}

// Encapsulates the personal data - required by the Wallet Provider to activate a Wallet Instance -
// of the End User in possession of the Wallet Instance. If the Wallet Instance has been previously
// activated, the Wallet Provider must confirm that the Holder of the Wallet has not changed. If
// this is the case, the Wallet Instance must be revoked.
//
// The data under this object is encapsulated for future-proofing the interface. It is foreseen
// that a Wallet Provider might require additional data.
message PersonIdentificationData {
  // The Estonian national identification code of the Wallet Instance's Holder without any prefixes
  // or suffixes.
  string personalIdentificationCode = 1;
}