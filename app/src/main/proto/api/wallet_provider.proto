// Prototype EE Wallet Provider interface
//
// This IDL defines a potential interface for the backend service the EE Wallet Provider provides.
//
// All services described within must be protected with TLS 1.3 (minimum).

syntax = "proto3";
package ee.cyber.wallet.provider;

// This service does not require client authentication.
service EeWalletInstanceRegistrationService {
  rpc RegisterWalletInstance (RegisterWalletInstanceRequest) returns (RegisterWalletInstanceResponse);
}

// This service mocks the functionality of a remote-HSM which is one candidate as the key-management solution for the EE-wallet.
//
// Note that the design goal of this service is simply to model communications with a remote HSM such that keys are managed outside the MVP EE Wallet Application.
// In other words, this service does NOT aim to fulfill any security requirements as proper key management is out of the scope of the MVP. A secure implementation
// of a remote-HSM would require at minimum the following:
//   1. A Signature Activation Module (SAM) - The HSM operator should not be able to sign arbitrary messages using End-User's keys.
//   2. There should be an additional authentication factor included for enabling signature creation.
//
// The methods described within this service require client authentication using the WalletInstanceCredentials.
service EeWalletProtectedService {
  rpc ActivateInstance (ActivateInstanceRequest) returns (ActivateInstanceResponse);
  rpc GenerateKey (GenerateKeyRequest) returns (GenerateKeyResponse);
  rpc Sign (SignRequest) returns (SignResponse);
  // NOTE: This method is purely a workaround required as the current wallet solution does not manage all keys remotely.
  // Nevertheless, it might be required to provide attestations for such keys. For this purpose the Wallet Provider currently
  // provides key attestations for any key pairs when presented a key pair by a Wallet Instance.
  rpc AttestKey (AttestKeyRequest) returns (AttestKeyResponse);
}

message RegisterWalletInstanceRequest {
  DeviceData deviceData = 1;
}

// Encapsulates any device data that the Wallet Provider might require for activating a Wallet Application.
message DeviceData {
  string modelName = 1;
}

message RegisterWalletInstanceResponse {
  WalletInstanceCredentials credentials = 1;
}

// The credentials assigned to a wallet instance during activation.
//
// These credentials are used for authentication when accessing the services which require client authentication. This offers the same security properties as
// HTTP Basic Authentication, which means it always has to be paired by additionally protecting the interface with TLS (as required above).
//
// For implementation notes, see https://grpc.io/docs/guides/auth/#extending-grpc-to-support-other-authentication-mechanisms.
message WalletInstanceCredentials {
  // Wallet Provider generates a Version 4 UUID. This UUID should act as a persistent identifier of a Wallet Application known only to the Wallet Provider.
  string instanceUuid = 1;
  // The Wallet Provider generates 256 bytes of information using a CSPRNG. Unlike the instanceUuid, it might be necessary to change this value periodically. Thus
  // this is a separate value. Note that the interface does currently not support changing this password, it's merely a hypothetical requirement.
  string instancePassword = 2;
}

message ActivateInstanceRequest {
  // An opaque token provided to the Wallet Instance by the EE PID Provider. See the EE PID Provider IDL for information on how the token is used for data retrieval.
  bytes personalDataAccessToken = 1;
}

message ActivateInstanceResponse {
  WalletInstanceActivationResult result = 1;
}

// An enum specifying the result of wallet activation call.
// If there is a need for more granular error codes, then these should be added as an extension to this enum.
enum WalletInstanceActivationResult {
  SUCCESS = 0;
  // The activation was unsuccessful for an unspecified reason.
  ERROR = 1;
}

message GenerateKeyRequest {
  // Note: Currently the EE Wallet Provider only enables requesting fixed length RSA keys. Ideally, this interface would allow for specifying requirements for key
  // generation, such as different length of keys or keys for other signature algorithms.
  KeyType keyType = 1;
}

enum KeyType {
  RSA = 0;
  EC = 1;
}

message GenerateKeyResponse {
  // A JWT containing key attestation information signed by the Wallet Provider.
  //
  // This JWT contains the following headers:
  //   * alg - as described in RFC7515.
  //   * x5c - as described in RFC7515.
  // This JWT contains the following claims:
  //   * iat - as described in RFC7519.
  //   * exp -  as described in RFC7519.
  //   * jwk - a structure as RFC7517 which describes the generated public key.
  string KeyAttestation = 1;
  // A version 4 UUID generated by the wallet provider which is to be referenced when using the key to create signatures.
  string keyUUID = 2;
}

message SignRequest {
  // see GenerateKeyResponse
  string keyUUID = 1;
  // The that is to be signed by the Wallet Provider calculated by the Wallet Application from the actual data that needs to be signed.
  bytes hashToBeSigned = 2;
  // Note: Currently the EE Wallet Provider uses fixed parameters for creating the signature. Ideally, this interface would allow for specifying the signature creation parameters - such as the padding scheme.
}

message SignResponse {
  // The generated signature
  bytes signature = 1;
}

message AttestKeyRequest {
  // Must be a jwk usable within a KeyAttestation (see GenerateKeyResponse).
  string jwk = 1;
}

message AttestKeyResponse {
  // See KeyAttestation in GenerateKeyResponse
  string KeyAttestation = 1;
}